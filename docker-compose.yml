# docker-compose.yml

version: "3.8"

services:
  # PostgreSQL Database for Product Service
  product_db:
    image: postgres:15-alpine
    container_name: product_db_container
    restart: always
    environment:
      POSTGRES_DB: products
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - product_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d products"]
      interval: 5s
      timeout: 5s
      retries: 5

  # PostgreSQL Database for Order Service
  order_db:
    image: postgres:15-alpine
    container_name: order_db_container
    restart: always
    environment:
      POSTGRES_DB: orders
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - order_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d orders"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Product Microservice (FastAPI)
  product_service:
    build:
      context: ./backend/product_service
      dockerfile: Dockerfile
    image: product-service:latest
    container_name: product_api_container
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      POSTGRES_HOST: product_db
    depends_on:
      product_db:
        condition: service_healthy
    volumes:
      - ./backend/product_service:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 10s
      timeout: 10s
      retries: 3

  # Order Microservice (FastAPI)
  order_service:
    build:
      context: ./backend/order_service
      dockerfile: Dockerfile
    image: order-service:latest
    container_name: order_api_container
    restart: always
    ports:
      - "8001:8000"
    environment:
      POSTGRES_HOST: order_db
      PRODUCT_SERVICE_URL: http://product_service:8000
    depends_on:
      order_db:
        condition: service_healthy
      product_service:
        condition: service_healthy
    volumes:
      - ./backend/order_service:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 10s
      timeout: 10s
      retries: 3

  # Frontend Service (Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend-service:latest
    container_name: frontend_container
    restart: always
    ports:
      - "3000:80"
    environment:
      PRODUCT_API_URL: "http://localhost:8000"
      ORDER_API_URL: "http://localhost:8001"
    depends_on:
      product_service:
        condition: service_healthy
      order_service:
        condition: service_healthy

# Named volumes for persistent database data
volumes:
  product_db_data:
  order_db_data: